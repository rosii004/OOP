1) Лабораториска вежба 6 - понеделник:
Да се дефинира класата Kvadrat во која што се чува информација за:

    должината на страната а на квадратот (double)

За класата да се дефинираат:

    default конструктор
    конструктор со аргументи
    copy конструктор
    double perimetar () што пресметува периметар на квадратот
    double plostina () што пресметува плоштина на квадратот
    void pecati () што печати информации за квадратот како во тест примерите

Да се имплементира класа Pravoagolnik што наследува од класата Kvadrat. Во неа се чуваат дополнителни информации за:

    проширувањето x на двете паралелни страни на квадратот (double)
    проширувањето у на другите две паралелни страни (double)

Правоаголникот всушност сега ќе има 2 страни со должина a+x и две страни со должина a+y.

За класата да се дефинираат:

    default конструктор
    конструктор Pravoagolnik (const Kvadrat &k, double x, double y)
    copy конструктор

Да се препокријат трите методи дефинирани погоре за класата Kvadrat.

Напомени:

    Ако x и y се исти, тогаш формата не е правоаголник туку е повторно квадрат. Во тој случај pecati() се повикува исто како за квадрат.
    При препокривање на методите во класата Pravoagolnik мора да има повик кон истоимените методи од класата Kvadrat
```
Input     

5
4.5
4
10
17.5
8.9
1 2
1.5 2.5
3 4.5
7 7
8 9
2

    
Result
===Testiranje na klasata Pravoagolnik===
Pravoagolnik so strani: 5.5 i 6.5 ima plostina P=35.75 i perimetar L=24
Pravoagolnik so strani: 5.5 i 6.5 ima plostina P=35.75 i perimetar L=24
Pravoagolnik so strani: 13 i 14.5 ima plostina P=188.5 i perimetar L=55
Kvadrat so dolzina a=24.5 ima plostina P=600.25 i perimetar L=98
Pravoagolnik so strani: 16.9 i 17.9 ima plostina P=302.51 i perimetar L=69.6

#include <iostream>

using namespace std;

class Kvadrat
{
protected:
    double a;
public:
    Kvadrat(){
        a = 0;
    }
    Kvadrat(double a){
        this->a = a;
    }
    Kvadrat(const Kvadrat &k){
        a = k.a;
    }
    double perimetar() const{
        return 4 * a;
    }
    double plostina() const{
        return a * a;
    }
    void pecati() const{
        cout << "Kvadrat so dolzina a=" << a << " ima plostina P=" << plostina() << " i perimetar L=" << perimetar()
             << endl;
    }
};

class Pravoagolnik : Kvadrat
{
private:
    double x;
    double y;
public:
    Pravoagolnik() : Kvadrat()
    {}

    Pravoagolnik(const Kvadrat &k, double x, double y) : Kvadrat(k)
    {
        this->x = x;
        this->y = y;
    }

    Pravoagolnik(const Pravoagolnik &p) : Kvadrat(p)
    {
        x = p.x;
        y = p.y;
    }

    double perimetar()
    {
        if (x == y)
        {
            a += x;
            return Kvadrat::perimetar();
        }
        else
            return 2 * (x + a) + 2 * (y + a);
    }

    double plostina()
    {
        if (x == y)
        {
            a += x;
            return Kvadrat::plostina();
        }
        else
            return (x + a) * (y + a);
    }

    void pecati()
    {
        if (x == y)
        {
            a += x;
            Kvadrat::pecati();
        }
        else
        {
            cout << "Pravoagolnik so strani: " << a + x << " i " << a + y << " ima plostina P=" << plostina()
                 << " i perimetar L=" << perimetar() << endl;
        }
    }
};

int main()
{
    int n;
    double a, x, y;
    Kvadrat *kvadrati;
    Pravoagolnik *pravoagolnici;

    cin >> n;

    kvadrati = new Kvadrat[n];
    pravoagolnici = new Pravoagolnik[n];

    for (int i = 0; i < n; i++)
    {
        cin >> a;

        kvadrati[i] = Kvadrat(a);
    }

    for (int i = 0; i < n; i++)
    {
        cin >> x >> y;

        pravoagolnici[i] = Pravoagolnik(kvadrati[i], x, y);
    }

    int testCase;
    cin >> testCase;

    if (testCase == 1)
    {
        cout << "===Testiranje na klasata Kvadrat===" << endl;
        for (int i = 0; i < n; i++)
            kvadrati[i].pecati();
    }
    else
    {
        cout << "===Testiranje na klasata Pravoagolnik===" << endl;
        for (int i = 0; i < n; i++)
            pravoagolnici[i].pecati();
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Да се дефинира класа NBAPlayer за која ќе се чуваат:

    динамички алоцирана низа од карактери за името на играчот
    низа од максимум 40 карактери за тимот во кој играчот моментално настапува
    просечен број на поени на играчот оваа сезона (double)
    просечен број на асистенции на играчот оваа сезона (double)
    просечен број на скокови на играчот оваа сезона (double)

За потребите на класата да се дефинираат:

    default конструктор и конструктор со аргументи
    copy constructor и оператор =
    деструктор

    метод rating() кој го враќа рејтингот на кошаркарот кој се пресметува како:

    45% од поените + 30% од асистенциите + 25% од скоковите

    метод print() кој го печати играчот во следниот формат:

    Име - тим

    Points: поени

    Assists: асистенции

    Rebounds: скокови

    Rating: рејтинг

AllStarPlayer

Од претходната класа NBAPlayer да се изведе класата AllStarPlayer за која дополнително ќе се чуваат и:

    просечен број на поени на играчот од All Star натпреварите (double)
    просечен број на асистенции на играчот од All Star натпреварите (double)
    просечен број на скокови на играчот од All Star натпреварите (double)

За потребите на класата да се дефинираат:

    default конструктор
    конструктор кој прима објект од NBAPlayer и плус додатните информации (погледни main)
    конструктор кој ги прима сите аргументи (погледни main)
    copy constructor, оператор =, деструктор

    метод allStarRating() кој го враќа рејтингот на кошаркарот од All Star натпреварите и кој се пресметува како:

    30% од поените + 40% од асистенциите + 30% од скоковите

Да се препокријат методите:

    rating() кој го враќа просекот од обичниот рејтинг на кошаркарот и неговиот All Star рејтинг

    print() кој покрај основните информации за кошаркарот печати и:

    All Star Rating: рејтингот од All Star натпреварите

    New Rating: просечниот рејтинг

Input     
1
Nikola_Jokic Denver_Nuggets 18.3 6.1 10.6
Lonzo_Ball Los_Angeles_Lakers 10.2 7.2 6.9
Donovan_Mitchell Utah_Jazz 20.4 3.6 3.7
Ben_Simmons Philadelphia_76ers 16 8.2 8.2
Kristaps_Porzingis New_York_Knicks 22.7 1.2 6.6

Result
NBA PLAYERS:
=====================================
Nikola_Jokic - Denver_Nuggets
Points: 18.3
Assists: 6.1
Rebounds: 10.6
Rating: 12.715
Lonzo_Ball - Los_Angeles_Lakers
Points: 10.2
Assists: 7.2
Rebounds: 6.9
Rating: 8.475
Donovan_Mitchell - Utah_Jazz
Points: 20.4
Assists: 3.6
Rebounds: 3.7
Rating: 11.185
Ben_Simmons - Philadelphia_76ers
Points: 16
Assists: 8.2
Rebounds: 8.2
Rating: 11.71
Kristaps_Porzingis - New_York_Knicks
Points: 22.7
Assists: 1.2
Rebounds: 6.6
Rating: 12.225

#include <iostream>
#include <cstring>
using namespace std;

class NBAPlayer {
protected:
    char*name;
    char team[40];
    double poeniIgrac;
    double brAsistencii;
    double brSkokovi;
   void copy(const NBAPlayer &n) {
        this->name=new char[strlen(n.name)+1];
        strcpy(this->name,n.name);
        strcpy(this->team,n.team);
        this->poeniIgrac=n.poeniIgrac;
        this->brAsistencii=n.brAsistencii;
        this->brSkokovi=n.brSkokovi;
    }
public:
    NBAPlayer(char *name=" ",char*team=" ",double poeniIgrac=0,double brAsistencii=0,
        double brSkokovi=0) {
        this->name=new char[strlen(name)+1];
        strcpy(this->name,name);
        strcpy(this->team,team);
        this->poeniIgrac=poeniIgrac;
        this->brAsistencii=brAsistencii;
        this->brSkokovi=brSkokovi;
    }
    NBAPlayer& operator=(const NBAPlayer &n) {
        if (this != &n) { // проверка за самододелување (self-assignment)
            delete [] name; // бришење на постојниот name за да нема мемориски протекување
             copy(n);
        }
        return *this;
    }

    double rating() {
        return 0.45*poeniIgrac+0.30*brAsistencii+0.25*brSkokovi;
    }
    void print() const {
        cout << name << " - " << team << endl;
        cout << "Points: " << poeniIgrac << endl;
        cout << "Assists: " << brAsistencii << endl;
        cout << "Rebounds: " << brSkokovi << endl;
        cout << "Rating: " << rating() << endl;
    }
    ~NBAPlayer() {
        delete []name;
    }

};

class AllStarPlayer:public NBAPlayer {
    double poeni;
    double asistencii;
    double skokovi;
public:
    AllStarPlayer(char*name=" ",char*team=" ",double poeniIgrac=0,double brAsistencii=0,
        double brSkokovi=0,double poeni=0,double asistencii=0,double skokovi=0)
            :NBAPlayer(name,team,poeniIgrac,brAsistencii,brSkokovi) {
        this->poeni=poeni;
        this->asistencii=asistencii;
        this->skokovi=skokovi;
    }
    AllStarPlayer(const NBAPlayer &n, double poeni, double asistencii, double skokovi)
       : NBAPlayer(n) {
        this->poeni = poeni;
        this->asistencii = asistencii;
        this->skokovi = skokovi;
    }
    AllStarPlayer &operator=(const AllStarPlayer &a) {
        if(this!=&a) {
           NBAPlayer::operator=(a); //mora cim ima nasleduvanje
            this->poeni = a.poeni;
            this->asistencii = a.asistencii;
            this->skokovi = a.skokovi;
        }
        return *this;
    }

    ~AllStarPlayer(){}

    double allStarRating() {
        return 0.30*poeni+0.40*asistencii+0.30*skokovi;
    }
    double rating() {
        double nbaRating=NBAPlayer::rating();
        double avg=(nbaRating+allStarRating())/2;
        return avg;
    }
};

int main() {

    char name[50];
    char team[40];
    double points;
    double assists;
    double rebounds;
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    NBAPlayer * players = new NBAPlayer[5];
    AllStarPlayer * asPlayers = new AllStarPlayer[5];
    int n;
    cin >> n;

    if (n == 1) {

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            players[i].print();
        }
    }
    else if (n == 2) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            asPlayers[i] = AllStarPlayer(players[i],allStarPoints,allStarAssists,allStarRebounds);
        }

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            players[i].print();

        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }
    else if (n == 3) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds,
                                         allStarPoints,allStarAssists,allStarRebounds);
        }
        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }

    delete [] players;
    delete [] asPlayers;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <cstring>

using namespace std;

class Lekar
{
protected:
    int faksimil;
    char ime[20];
    char prezime[20];
    double osnovnaPlata;
public:
    Lekar(int faksimil = 0, char *ime = "", char *prezime = "", double osnovnaPlata = 0)
    {
        this->faksimil = faksimil;
        strcpy(this->ime, ime);
        strcpy(this->prezime, prezime);
        this->osnovnaPlata = osnovnaPlata;
    }

    Lekar(const Lekar &l)
    {
        faksimil = l.faksimil;
        strcpy(ime, l.ime);
        strcpy(prezime, l.prezime);
        osnovnaPlata = l.osnovnaPlata;
    }

    double plata() const
    {
        return osnovnaPlata;
    }

    void pecati()
    {
        cout << faksimil << ": " << ime << " " << prezime << endl;
    }
};

class MaticenLekar : public Lekar
{
private:
    int pacienti;
    double *kotizacii;
public:
    MaticenLekar() : Lekar()
    {
        pacienti = 0;
        kotizacii = new double[100];
    }

    MaticenLekar(Lekar &l, int pacienti, double *kotizacii) : Lekar(l)
    {
        this->pacienti = pacienti;
        this->kotizacii = new double[100];
        for (int i = 0; i < this->pacienti; i++)
            this->kotizacii[i] = kotizacii[i];
    }

    MaticenLekar(MaticenLekar &l) : Lekar(l)
    {
        pacienti = l.pacienti;
        kotizacii = new double[100];
        for (int i = 0; i < pacienti; i++)
            kotizacii[i] = l.kotizacii[i];
    }

    MaticenLekar &operator=(const MaticenLekar &l)
    {
        if (this == &l)
            return *this;

        faksimil = l.faksimil;
        strcpy(ime, l.ime);
        strcpy(prezime, l.prezime);
        osnovnaPlata = l.osnovnaPlata;
        pacienti = l.pacienti;
        delete[] kotizacii;
        kotizacii = new double[100];
        for (int i = 0; i < pacienti; i++)
            kotizacii[i] = l.kotizacii[i];

        return *this;
    }

    ~MaticenLekar()
    {
        delete[] kotizacii;
    }

    void pecati()
    {
        Lekar::pecati();
        cout << "Prosek na kotizacii: " << kotizacija() << endl;
    }

    double kotizacija()
    {
        double s = 0;

        for (int i = 0; i < pacienti; i++)
            s += kotizacii[i];

        return s / pacienti;
    }

    double plata()
    {
        return Lekar::plata() + (0.3 * kotizacija());
    }
};

int main()
{
    int n;
    cin >> n;
    int pacienti;
    double kotizacii[100];
    int faksimil;
    char ime[20];
    char prezime[20];
    double osnovnaPlata;

    Lekar *lekari = new Lekar[n];
    MaticenLekar *maticni = new MaticenLekar[n];

    for (int i = 0; i < n; i++)
    {
        cin >> faksimil >> ime >> prezime >> osnovnaPlata;
        lekari[i] = Lekar(faksimil, ime, prezime, osnovnaPlata);
    }

    for (int i = 0; i < n; i++)
    {
        cin >> pacienti;
        for (int j = 0; j < pacienti; j++)
        {
            cin >> kotizacii[j];
        }
        maticni[i] = MaticenLekar(lekari[i], pacienti, kotizacii);
    }

    int testCase;
    cin >> testCase;

    if (testCase == 1)
    {
        cout << "===TESTIRANJE NA KLASATA LEKAR===" << endl;
        for (int i = 0; i < n; i++)
        {
            lekari[i].pecati();
            cout << "Osnovnata plata na gorenavedeniot lekar e: " << lekari[i].plata() << endl;
        }
    }
    else
    {
        cout << "===TESTIRANJE NA KLASATA MATICENLEKAR===" << endl;
        for (int i = 0; i < n; i++)
        {
            maticni[i].pecati();
            cout << "Platata na gorenavedeniot maticen lekar e: " << maticni[i].plata() << endl;
        }
    }

    delete[] lekari;
    delete[] maticni;

    return 0;
}
